{"version":3,"sources":["../../src/extractInfo.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAIA,SAAO,CAAC,GAAG,CAAC,uBAJG,cAAc,EAIF,oFAAoF,CAAC,CAAC,CAAC;;AAGlH,WAAS,sBAAsB,CAAC,WAAW,EAAE,GAAG,EAAiB;QAAf,SAAS,gCAAG,CAAC;;AAC7D,QAAI,CAAC,WAAW,CAAC,eAAe,CAAC,GAAG,EAAE,SAAS,CAAC,EAAE;AAChD,aAAO,CAAC,GAAG,CAAC,8BAA8B,EAAE,GAAG,CAAC,CAAC;KAClD;AACD,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,GAAG,SAAS,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;AACnD,UAAI,GAAG,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC;AAC1C,UAAI,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;AAC9C,UAAI,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE;AAC/B,eAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,GAAG,EAAE,UAAU,EAAE,GAAG,CAAC,CAAC;OACvD;KACF;GACF;;AAED,MAAI,YAAY,GAAG,CACjB,wGAAwG,CACzG,CAAC;;AAEF,kBAAG,QAAQ,CAAC,0BAA0B,EAAE,MAAM,EAAE,UAAU,GAAG,EAAC,IAAI,EAAE;AAClE,QAAI,GAAG,EAAE;AACP,aAAO,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;KACzB;;AAED,QAAI,UAAU,GAAG,EAAE,CAAC;AACpB,2BA9BM,KAAK,EA8BL,IAAI,EAAE,UAAU,CAAC,CAAC;;;AAGxB,oBAAG,aAAa,CAAC,sBAAsB,EAAE,IAAI,MAAM,CAAC,IAAI,UAAU,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;AACtG,oBAAG,aAAa,CAAC,+BAA+B,EAAE,IAAI,MAAM,CAAC,IAAI,UAAU,CAAC,UAAU,CAAC,oBAAoB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;;AAExH,QAAI,QAAQ,GAAG,gBAAG,YAAY,CAAC,wBAAwB,CAAC,CAAC;AACzD,QAAI,SAAS,GAAG,mBAnCV,WAAW,CAmCe,IAAI,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC1D,WAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;AACvB,QAAI,WAAW,GAAG,mBArCZ,WAAW,CAqCiB,SAAS,CAAC,CAAC;;;;AAK7C,WAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;AACvB,gBAAY,CAAC,OAAO,CAAC,UAAA,CAAC;aACpB,sBAAsB,CAAC,WAAW,4BAA4B,CAAC,CAAC;KAAA,CAAC,CAAC;;;AAGpE,WAAO,UAAU,CAAC,WAAW,CAAC;AAC9B,WAAO,UAAU,CAAC,oBAAoB,CAAC;AACvC,QAAI,mBAAmB,GAAG,wGAAwG,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,KAAK,CAAC;AACxK,oBAAG,aAAa,CAAC,sBAAsB,EAAE,mBAAmB,CAAC,CAAC;GAC/D,CAAC,CAAC","file":"extractInfo.js","sourcesContent":["import {parse, getFingerprint} from './abp-filter-parser.js';\nimport fs from 'fs';\nimport {BloomFilter} from 'bloom-filter-js';\n\nconsole.log(getFingerprint('oauth.googleusercontent.com/gadgets/js/core:rpc:shindig.random:shindig.sha1.js?c=2'));\n\n\nfunction discoverMatchingPrefix(bloomFilter, str, prefixLen = 8) {\n  if (!bloomFilter.substringExists(str, prefixLen)) {\n    console.log('no substring exists for url:', str);\n  }\n  for (var i = 0; i < str.length - prefixLen + 1; i++) {\n    let sub = str.substring(i, i + prefixLen);\n    let cleaned = sub.replace(/^https?:\\/\\//, '');\n    if (bloomFilter.exists(cleaned)) {\n      console.log('bad-fingerprint:', sub, 'for url:', str);\n    }\n  }\n}\n\nlet sitesToCheck = [\n  'http://c.s-microsoft.com/en-ca/CMSImages/store_symbol.png?version=e2eecca5-4550-10c6-57b1-5114804a4c01',\n];\n\nfs.readFile('./test/data/easylist.txt', 'utf8', function (err,data) {\n  if (err) {\n    return console.log(err);\n  }\n\n  let parserData = {};\n  parse(data, parserData);\n\n  // Write out the bloom filter data files\n  fs.writeFileSync('dist/bloomFilterData', new Buffer(new Uint8Array(parserData.bloomFilter.toJSON())));\n  fs.writeFileSync('dist/exceptionBloomFilterData', new Buffer(new Uint8Array(parserData.exceptionBloomFilter.toJSON())));\n\n  let readData = fs.readFileSync('./dist/bloomFilterData');\n  let bloomData = new BloomFilter(new Uint8Array(readData));\n  console.log(bloomData);\n  let bloomFilter = new BloomFilter(bloomData);\n\n  //console.log('Number of filters processed: ', parserData.filterCount);\n\n\n  console.log('-------');\n  sitesToCheck.forEach(s =>\n    discoverMatchingPrefix(bloomFilter/*parserData.bloomFilter*/, s));\n\n  // WRite out the POD cached filter data JSM\n  delete parserData.bloomFilter;\n  delete parserData.exceptionBloomFilter;\n  let cachedFilterDataJSM = 'dump(\"######Loaded cached-rules.jsm\\\\n\");\\nthis.EXPORTED_SYMBOLS = [\"parserData\"];\\nthis.parserData = ' + JSON.stringify(parserData) + ';\\n';\n  fs.writeFileSync('cachedFilterData.jsm', cachedFilterDataJSM);\n});\n"]}